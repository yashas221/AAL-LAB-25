#include <stdio.h>
#include <limits.h>

#define MAX_CITIES 10

int tsp(int dist[MAX_CITIES][MAX_CITIES], int visited[MAX_CITIES], int currPos, int n, int count, int cost, int ans) {
    if (count == n) {
        if (dist[currPos][0] != 0) {
            ans = (cost + dist[currPos][0] < ans) ? (cost + dist[currPos][0]) : ans;
        }
        return ans;
    }
    int city;
    for (city = 0; city < n; city++) {
        if (!visited[city] && dist[currPos][city] != 0) { 
            visited[city] = 1;
            ans = tsp(dist, visited, city, n, count + 1, cost + dist[currPos][city], ans);
            visited[city] = 0;
        }
    }
    return ans;
}

int main() {
    int n;
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    int dist[MAX_CITIES][MAX_CITIES];
    printf("Enter the distance matrix (0 means no path between cities):\n");
    int i,j;
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }

    int visited[MAX_CITIES] = {0};
    visited[0] = 1;  
    int ans = INT_MAX;
    
    ans = tsp(dist, visited, 0, n, 1, 0, ans);

    printf("The minimum cost to visit all cities and return to the starting point is: %d\n", ans);
    
    return 0;
}

OUTPUT:
Enter the number of cities: 3
Enter the distance matrix (0 means no path between cities):
0
12
45
7
12
3
12
3
4
The minimum cost to visit all cities and return to the starting point is: 27
